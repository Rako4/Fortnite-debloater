@echo off
setlocal enabledelayedexpansion
:: Created with Froki's PS12BAT Converter
:: All Rights Reserved © Froki
powershell -ExecutionPolicy Bypass -Command "iex ([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('')))"
endlocal
exit /b
